When trying an MMAS implemetation with these changes:
    self.tau_max = 1.0  # Adjust as needed
    self.tau_min = 0.1  # Adjust as needed

    modify the pheromone matrix initialization to use tau_max:
    self.pheromone_matrix = np.full((self.num_cities, self.num_cities), self.tau_max)

    Change update_pheromones method to update pheromones based on the best ant only:
    def update_pheromones(self, best_solution, best_cost):
        self.pheromone_delta.fill(0)
        for i in range(len(best_solution) - 1):
            self.pheromone_delta[best_solution[i], best_solution[i + 1]] += self.Q / best_cost
        self.pheromone_matrix += self.pheromone_delta


    In the update_pheromones and evaporate_pheromones methods, ensure the pheromone values stay within bounds:
    def enforce_pheromone_limits(self):
        self.pheromone_matrix = np.clip(self.pheromone_matrix, self.tau_min, self.tau_max)

    # Inside the while loop
    if cost < best_cost:
        best_cost = cost
        best_solution = solution
        self.update_pheromones(best_solution, best_cost)  # Update pheromones

The solutions generated are worse (they have a higher path cost than without these changes)